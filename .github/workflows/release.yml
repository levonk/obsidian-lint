name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run full test suite
        run: |
          bun run typecheck
          bun run lint
          bun run format:check
          bun run test:ci

      - name: Build project
        run: bun run build

  release-npm:
    name: Release to NPM
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-plugin:
    name: Release Obsidian Plugin
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build and package plugin
        run: |
          bun run build:plugin
          bun run package:plugin

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release

            ### CLI Tool
            - Available via `npm install -g obsidian-lint`
            - Or run directly with `npx obsidian-lint`

            ### Obsidian Plugin
            - Download the `obsidian-lint-plugin.zip` file below
            - Extract to `.obsidian/plugins/obsidian-lint/` in your vault
            - Enable the plugin in Obsidian settings

            ### Installation Instructions

            **CLI Installation:**
            ```bash
            npm install -g obsidian-lint
            obsidian-lint --help
            ```

            **Plugin Installation:**
            1. Download `obsidian-lint-plugin.zip`
            2. Extract to `.obsidian/plugins/obsidian-lint/`
            3. Restart Obsidian
            4. Enable "Obsidian Lint" in Community Plugins settings

      - name: Upload Plugin Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./obsidian-lint-plugin.zip
          asset_name: obsidian-lint-plugin.zip
          asset_content_type: application/zip

      - name: Upload Plugin Files for Community Plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./manifest.json
          asset_name: manifest.json
          asset_content_type: application/json

  update-plugin-manifest:
    name: Update Plugin Version
    runs-on: ubuntu-latest
    needs: [release-npm, release-plugin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update manifest version
        run: |
          # Update manifest.json with new version
          sed -i 's/"version": ".*"/"version": "${{ steps.version.outputs.VERSION }}"/' manifest.json

          # Update package.json version to match
          sed -i 's/"version": ".*"/"version": "${{ steps.version.outputs.VERSION }}"/' package.json

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifest.json package.json
          git commit -m "chore: update version to ${{ steps.version.outputs.VERSION }}" || exit 0
          git push
